name: Run TG Parser and Update Files

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 允许手动触发
  schedule:
    # 每天运行，例如 UTC 时间凌晨 0 点
    - cron: '0 0 * * *'

jobs:
  run_parser_and_push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x' # 使用最新的 Python 3 版本

    - name: Cache dependencies
      # 使用 actions/cache@v4 进行依赖缓存
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip # pip 缓存的默认路径
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }} # 根据操作系统和 requirements.txt 文件内容生成缓存 key
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run TG Parser
      env:
        
        THRD_PARS: '128' # 并发抓取线程数
        PARS_DP: '10'     # 每个频道抓取页面深度
        USE_INV_TC: 'n'  # 是否使用无效频道列表
      run: |
      
        python tg-parser.py

    - name: Configure Git
      run: |
        git config --local user.name "GitHub Action"
        git config --local user.email "action@github.com"

    - name: Commit and push updated files
      run: |
        # 添加所有可能被脚本修改的文件
        git add configtg.txt telegramchannels.json invalidtelegramchannels.json
        # 检查是否有实际更改，避免空提交
        git diff --staged --quiet || git commit -m "Update TG configs and channel lists"
        # 推送更改到仓库
        git push
        
    - name: Convert mixed to base64
      run: |
          content=$(cat configtg.txt | base64| tr -d '\n')
            echo "$content" > splitted/mixed

    - name: Convert socks to base64
      run: |
          content=$(cat python/socks | base64| tr -d '\n')
            echo "$content" > splitted/socks

    - name: Convert ss to base64
      run: |
          content=$(cat python/ss | base64| tr -d '\n')
            echo "$content" > splitted/ss

    - name: Convert trojan to base64
      run: |
          content=$(cat python/trojan | base64| tr -d '\n')
            echo "$content" > splitted/trojan

    - name: Convert vless to base64
      run: |
          content=$(cat python/vless | base64| tr -d '\n')
            echo "$content" > splitted/vless

    - name: Convert vmess to base64
      run: |
          content=$(cat python/vmess | base64| tr -d '\n')
            echo "$content" > splitted/vmess

    - name: Convert tuic to base64
      run: |
          content=$(cat python/tuic | base64| tr -d '\n')
            echo "$content" > splitted/tuic

    - name: Convert hysteria2 to base64
      run: |
          content=$(cat python/hysteria2 | base64| tr -d '\n')
            echo "$content" > splitted/hysteria2

    - name: Convert hy2 to base64
      run: |
          content=$(cat python/hy2 | base64| tr -d '\n')
            echo "$content" > splitted/hy2

    - name: Convert hysteria to base64
      run: |
          content=$(cat python/hysteria | base64| tr -d '\n')
            echo "$content" > splitted/hysteria

    - name: Convert naive to base64
      run: |
          content=$(cat python/naive | base64| tr -d '\n')
            echo "$content" > splitted/naive
       
    - name: Check for Base64 Changes
      id: changes64
      run: |
            git diff --quiet && echo 'No changes' || echo '::set-output name=changed::true'   
      
    - name: Commit and push Base64
      if: steps.changes.outputs.changed == 'true'   
      run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add splitted/mixed
          git add splitted/*
          git commit --allow-empty -m "Update output files"
          git push
